1. What design principles does this code violate?
    - Duplication & Abstraction
      - Every single valueString property has to be grabbed using 'getProperty()' then later validated to make sure not to be a null or negative value.  This could get abstracted all the way as a method within ValueString.
2. Refactor the code to improve its design.


public void getTimes(Properties props) throws Exception {
  ValueChecker = new ValueChecker();

  checkInterval = valueChecker.extractValidatedProperty("interval", "monitor interval");
  
  monitorTime = valueChecker.extractValidatedProperty("duration", "duration")

  departureOffset = valueChecker.extractValidatedProperty("departure", "departure offset");
}

public ValueChecker() {
  public void extractValidatedProperty(String propertyName, String missingMsg) throws Exception {
    String valueString = props.getProperty(propertyName);
    if (valueString == null) {  
      throw new MissingPropertiesException(missingMsg);
    }
    int value = Integer.parseInt(valueString);
    if (value <= 0) {
      throw new MissingPropertiesException(missingMsg + " > 0");
    }
    return value;
  }
}